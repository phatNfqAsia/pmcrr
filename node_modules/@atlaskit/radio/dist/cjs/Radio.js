"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RadioWithoutAnalytics = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _analyticsNext = require("@atlaskit/analytics-next");

var _package = require("../package.json");

var _RadioIcon = _interopRequireDefault(require("./RadioIcon"));

var _RadioInput = require("./styled/RadioInput");

var _Radio = require("./styled/Radio");

var Radio =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(Radio, _Component);

  function Radio() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Radio);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Radio)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "state", {
      isHovered: false,
      isFocused: false,
      isActive: false,
      isMouseDown: false
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "onBlur", function (event) {
      _this.setState({
        // onBlur is called after onMouseDown if the checkbox was focused, however
        // in this case on blur is called immediately after, and we need to check
        // whether the mouse is down.
        isActive: _this.state.isMouseDown && _this.state.isActive,
        isFocused: false
      });

      if (_this.props.onBlur) {
        _this.props.onBlur(event);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "onFocus", function (event) {
      _this.setState({
        isFocused: true
      });

      if (_this.props.onFocus) {
        _this.props.onFocus(event);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "onMouseLeave", function (event) {
      _this.setState({
        isActive: false,
        isHovered: false
      });

      if (_this.props.onMouseLeave) {
        _this.props.onMouseLeave(event);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "onMouseEnter", function (event) {
      _this.setState({
        isHovered: true
      });

      if (_this.props.onMouseEnter) {
        _this.props.onMouseEnter(event);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "onMouseUp", function (event) {
      _this.setState({
        isActive: false,
        isMouseDown: false
      });

      if (_this.props.onMouseUp) {
        _this.props.onMouseUp(event);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "onMouseDown", function (event) {
      _this.setState({
        isActive: true,
        isMouseDown: true
      });

      if (_this.props.onMouseDown) {
        _this.props.onMouseDown(event);
      }
    });
    return _this;
  }

  (0, _createClass2.default)(Radio, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          ariaLabel = _this$props.ariaLabel,
          isDisabled = _this$props.isDisabled,
          isRequired = _this$props.isRequired,
          isInvalid = _this$props.isInvalid,
          isChecked = _this$props.isChecked,
          label = _this$props.label,
          name = _this$props.name,
          onChange = _this$props.onChange,
          onInvalid = _this$props.onInvalid,
          value = _this$props.value,
          props = (0, _objectWithoutProperties2.default)(_this$props, ["ariaLabel", "isDisabled", "isRequired", "isInvalid", "isChecked", "label", "name", "onChange", "onInvalid", "value"]);
      var _this$state = this.state,
          isFocused = _this$state.isFocused,
          isHovered = _this$state.isHovered,
          isActive = _this$state.isActive;
      return _react.default.createElement(_Radio.Label, (0, _extends2.default)({}, props, {
        isDisabled: isDisabled,
        onMouseDown: this.onMouseDown,
        onMouseEnter: this.onMouseEnter,
        onMouseLeave: this.onMouseLeave,
        onMouseUp: this.onMouseUp
      }), _react.default.createElement(_RadioInput.RadioInputWrapper, null, _react.default.createElement(_RadioInput.HiddenInput, {
        "aria-label": ariaLabel,
        checked: isChecked,
        disabled: isDisabled,
        name: name,
        onChange: onChange,
        onBlur: this.onBlur,
        onInvalid: onInvalid,
        onFocus: this.onFocus,
        required: isRequired,
        type: "radio",
        value: value
      }), _react.default.createElement(_RadioIcon.default, {
        isActive: isActive,
        isChecked: isChecked,
        isDisabled: isDisabled,
        isFocused: isFocused,
        isHovered: isHovered,
        isInvalid: isInvalid
      })), label ? _react.default.createElement(_Radio.LabelText, null, label) : null);
    }
  }]);
  return Radio;
}(_react.Component);

exports.RadioWithoutAnalytics = Radio;
(0, _defineProperty2.default)(Radio, "defaultProps", {
  isDisabled: false,
  isInvalid: false,
  isChecked: false
});
var createAndFireEventOnAtlaskit = (0, _analyticsNext.createAndFireEvent)('atlaskit');

var _default = (0, _analyticsNext.withAnalyticsContext)({
  componentName: 'radio',
  packageName: _package.name,
  packageVersion: _package.version
})((0, _analyticsNext.withAnalyticsEvents)({
  onChange: createAndFireEventOnAtlaskit({
    action: 'changed',
    actionSubject: 'radio',
    attributes: {
      componentName: 'radio',
      packageName: _package.name,
      packageVersion: _package.version
    }
  })
})(Radio));

exports.default = _default;